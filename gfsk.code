import numpy as np
import matplotlib.pyplot as plt
from scipy.signal.windows import gaussian
from scipy.signal import convolve

# ------------------- Parameters -------------------
bitrate = 1e3             # Bitrate (1 kbps)
f_carrier = 7e3          # Carrier frequency (10 kHz)
f_dev = 2e3               # Frequency deviation for GFSK
fs = 100e3                # Sampling frequency (100 kHz)
Tb = 1 / bitrate
samples_per_bit = int(fs * Tb)

# ------------------- Bitstream -------------------
bits = np.array([1, 0, 1, 1, 0, 0, 1, 0])
bit_symbols = 2 * bits - 1               # Map: 0→-1, 1→+1
freq_shift = f_dev * bit_symbols         # Baseband freq shift
freq_upsampled = np.repeat(freq_shift, samples_per_bit)

# ------------------- Gaussian Filter -------------------
BT = 0.3
span = 4
N = samples_per_bit * span
std_dev = samples_per_bit / (2 * np.pi * BT)
gauss_filter = gaussian(N, std=std_dev)
gauss_filter /= np.sum(gauss_filter)

# ------------------- GFSK Modulation -------------------
smoothed_freq_shift = convolve(freq_upsampled, gauss_filter, mode='same')
instantaneous_freq = f_carrier + smoothed_freq_shift

t = np.linspace(0, Tb * len(bits), len(freq_upsampled), endpoint=False)
carrier = np.cos(2 * np.pi * f_carrier * t)
phase_gfsk = 2 * np.pi * np.cumsum(instantaneous_freq) / fs
gfsk_signal = np.cos(phase_gfsk)

# ------------------- Plot Setup -------------------
plot_duration = len(bits) * Tb
plot_samples = len(t)

bit_edges = np.arange(0, plot_duration, Tb)

plt.figure(figsize=(14, 8))

# --- Bitstream Plot ---
plt.subplot(3, 1, 1)
plt.step(t[::samples_per_bit], bits, where='post', linewidth=2)
for edge in bit_edges:
    plt.axvline(edge, color='gray', linestyle='--', linewidth=0.7)
plt.title("Input Bitstream")
plt.ylabel("Bit")
plt.ylim(-0.5, 1.5)
plt.grid(True)
plt.xlim([0, plot_duration])

# --- Carrier Plot ---
plt.subplot(3, 1, 2)
plt.plot(t, carrier, color='gray')
for edge in bit_edges:
    plt.axvline(edge, color='gray', linestyle='--', linewidth=0.7)
plt.title("Carrier Wave (10 kHz)")
plt.ylabel("Amplitude")
plt.grid(True)
plt.xlim([0, plot_duration])

# --- GFSK Plot ---
plt.subplot(3, 1, 3)
plt.plot(t, gfsk_signal, color='blue')
for edge in bit_edges:
    plt.axvline(edge, color='gray', linestyle='--', linewidth=0.7)
plt.title("GFSK Modulated Signal")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude")
plt.grid(True)
plt.xlim([0, plot_duration])

plt.tight_layout()
plt.show()
